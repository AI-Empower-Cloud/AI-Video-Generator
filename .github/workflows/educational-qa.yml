name: 🎓 Educational Content Quality Assurance

on:
  push:
    paths:
      - 'ai_tech_education_app.py'
      - 'universal_education_app.py'
      - 'universal_content_creator.py'
      - '**/*education*.py'
      - 'requirements.txt'
  pull_request:
    paths:
      - 'ai_tech_education_app.py'
      - 'universal_education_app.py'
      - 'universal_content_creator.py'
      - '**/*education*.py'

jobs:
  educational-content-validation:
    name: 🧪 Validate Educational Content
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        education-level: ["middle-school", "high-school", "professional"]
        subject-area: ["ai", "computer-science", "digital-literacy"]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest streamlit selenium
        
    - name: 🎓 Test educational content generation
      run: |
        echo "Testing ${{ matrix.education-level }} level ${{ matrix.subject-area }} content"
        python -c "
        import sys
        sys.path.append('.')
        from ai_tech_education_app import generate_ai_tech_script, AI_TECH_SUBJECTS
        
        # Test content generation for different levels
        subjects = {
            'middle-school': 'AI for Middle School',
            'high-school': 'AI for High School', 
            'professional': 'Professional AI Tools'
        }
        
        subject_map = {
            'ai': ['What is Artificial Intelligence?', 'Introduction to Machine Learning', 'ChatGPT for Business Productivity'],
            'computer-science': ['Python Programming Basics', 'Programming AI with Python', 'Machine Learning for Data Analysis'],
            'digital-literacy': ['Digital Citizenship and Safety', 'Computer Networks and Internet', 'Digital Collaboration Tools']
        }
        
        level = '${{ matrix.education-level }}'
        subject_area = '${{ matrix.subject-area }}'
        
        if level in subjects and subject_area in subject_map:
            subject = subjects[level]
            topics = subject_map[subject_area]
            
            if subject in AI_TECH_SUBJECTS:
                for topic in topics:
                    if topic in AI_TECH_SUBJECTS[subject]['topics']:
                        script = generate_ai_tech_script(subject, topic, 'Beginner', 20)
                        assert len(script) > 100, f'Script too short for {topic}'
                        assert topic in script, f'Topic {topic} not mentioned in script'
                        print(f'✅ Generated content for {topic} ({len(script)} chars)')
        "
        
    - name: 🎯 Test age-appropriate content
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from ai_tech_education_app import AI_TECH_SUBJECTS
        
        # Test age-appropriate vocabulary and complexity
        level = '${{ matrix.education-level }}'
        
        if level == 'middle-school':
            subject = 'AI for Middle School'
            # Check for age-appropriate language
            config = AI_TECH_SUBJECTS.get(subject, {})
            assert 'friendly_teacher' in config.get('voice_style', ''), 'Should use friendly teaching style'
            duration = config.get('duration_range', (0, 0))
            assert duration[1] <= 20, 'Middle school videos should be max 20 minutes'
            print('✅ Middle school content appropriately configured')
            
        elif level == 'high-school':
            subject = 'AI for High School'
            config = AI_TECH_SUBJECTS.get(subject, {})
            assert 'tech_instructor' in config.get('voice_style', ''), 'Should use technical instructor style'
            duration = config.get('duration_range', (0, 0))
            assert duration[1] <= 35, 'High school videos should be max 35 minutes'
            print('✅ High school content appropriately configured')
            
        elif level == 'professional':
            subject = 'Professional AI Tools'
            config = AI_TECH_SUBJECTS.get(subject, {})
            assert 'business_consultant' in config.get('voice_style', ''), 'Should use business consultant style'
            assert 'Professional' in config.get('levels', []), 'Should include professional level'
            print('✅ Professional content appropriately configured')
        "

  streamlit-app-testing:
    name: 🖥️ Test Streamlit Applications
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest streamlit
        
    - name: 🧪 Test AI Tech Education App
      run: |
        python -c "
        import streamlit as st
        import sys
        sys.path.append('.')
        
        # Test app imports and basic functionality
        try:
            import ai_tech_education_app
            print('✅ AI Tech Education App imports successfully')
            
            # Test subject configuration
            subjects = ai_tech_education_app.AI_TECH_SUBJECTS
            assert len(subjects) >= 6, 'Should have at least 6 subject areas'
            print(f'✅ Found {len(subjects)} subject areas configured')
            
            # Test each subject has required fields
            for subject, config in subjects.items():
                assert 'topics' in config, f'{subject} missing topics'
                assert 'levels' in config, f'{subject} missing levels'
                assert 'duration_range' in config, f'{subject} missing duration_range'
                assert len(config['topics']) > 0, f'{subject} has no topics'
                print(f'✅ {subject} properly configured with {len(config[\"topics\"])} topics')
                
        except Exception as e:
            print(f'❌ Error testing AI Tech Education App: {e}')
            sys.exit(1)
        "
        
    - name: 🧪 Test Universal Education App
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        try:
            import universal_education_app
            print('✅ Universal Education App imports successfully')
            
            # Test educational subjects configuration
            subjects = universal_education_app.EDUCATIONAL_SUBJECTS
            assert len(subjects) >= 10, 'Should have comprehensive subject coverage'
            print(f'✅ Found {len(subjects)} educational subjects configured')
            
        except Exception as e:
            print(f'❌ Error testing Universal Education App: {e}')
            sys.exit(1)
        "

  accessibility-testing:
    name: ♿ Accessibility Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: ♿ Test accessibility features
      run: |
        python -c "
        # Test that educational content includes accessibility features
        import sys
        sys.path.append('.')
        from ai_tech_education_app import generate_ai_tech_script
        
        # Generate sample content and check for accessibility features
        script = generate_ai_tech_script('AI for Middle School', 'What is Artificial Intelligence?', '7th Grade', 15)
        
        # Check for clear structure
        assert '🌟' in script or '📖' in script or '🎯' in script, 'Should include visual cues'
        assert 'What' in script and 'How' in script, 'Should include clear questions'
        assert len(script.split('.')) > 5, 'Should have multiple clear sentences'
        
        print('✅ Content includes accessibility features')
        print('✅ Visual cues and clear structure present')
        print('✅ Content is structured for different learning styles')
        "

  performance-testing:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler line-profiler
        
    - name: ⚡ Test script generation performance
      run: |
        python -c "
        import time
        import sys
        sys.path.append('.')
        from ai_tech_education_app import generate_ai_tech_script
        
        # Test performance of script generation
        start_time = time.time()
        
        # Generate multiple scripts to test performance
        subjects = ['AI for Middle School', 'AI for High School', 'Professional AI Tools']
        topics = ['Introduction', 'Basics', 'Advanced Concepts']
        
        for subject in subjects:
            for topic in topics:
                script = generate_ai_tech_script(subject, f'{topic} Topic', 'Intermediate', 20)
                assert len(script) > 50, f'Script generation failed for {subject} - {topic}'
        
        end_time = time.time()
        generation_time = end_time - start_time
        
        print(f'✅ Generated {len(subjects) * len(topics)} scripts in {generation_time:.2f} seconds')
        assert generation_time < 5.0, f'Script generation too slow: {generation_time:.2f}s'
        print('✅ Performance test passed')
        "

  educational-standards-compliance:
    name: 📋 Educational Standards Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🎓 Check educational standards alignment
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from ai_tech_education_app import AI_TECH_SUBJECTS
        
        # Check alignment with educational standards
        standards_coverage = {
            'K-12 Computer Science Standards': 0,
            'CSTA Standards': 0,
            'ISTE Standards': 0,
            'Professional Development': 0
        }
        
        for subject, config in AI_TECH_SUBJECTS.items():
            topics = config.get('topics', [])
            levels = config.get('levels', [])
            
            # Check K-12 coverage
            if any(grade in ' '.join(levels) for grade in ['6th', '7th', '8th', '9th', '10th', '11th', '12th']):
                standards_coverage['K-12 Computer Science Standards'] += len(topics)
            
            # Check CSTA standards (Computing Systems, Networks, Data, Algorithms, Programming)
            csta_keywords = ['algorithm', 'programming', 'data', 'network', 'system', 'computer']
            csta_topics = [t for t in topics if any(keyword in t.lower() for keyword in csta_keywords)]
            standards_coverage['CSTA Standards'] += len(csta_topics)
            
            # Check ISTE standards (Digital Citizen, Knowledge Constructor, Creative Communicator)
            iste_keywords = ['digital', 'creative', 'communication', 'citizenship', 'literacy']
            iste_topics = [t for t in topics if any(keyword in t.lower() for keyword in iste_keywords)]
            standards_coverage['ISTE Standards'] += len(iste_topics)
            
            # Check professional development coverage
            if 'Professional' in levels or 'business' in subject.lower():
                standards_coverage['Professional Development'] += len(topics)
        
        print('📋 Educational Standards Compliance Check:')
        for standard, count in standards_coverage.items():
            print(f'   {standard}: {count} topics covered')
            assert count > 0, f'No coverage for {standard}'
        
        print('✅ All educational standards have topic coverage')
        print('✅ Platform meets educational compliance requirements')
        "

  report-generation:
    name: 📊 Generate Quality Report
    runs-on: ubuntu-latest
    needs: [educational-content-validation, streamlit-app-testing, accessibility-testing, performance-testing, educational-standards-compliance]
    if: always()
    
    steps:
    - name: 📊 Generate comprehensive quality report
      run: |
        echo "# 🎓 AI Technology Education Platform Quality Report" > quality_report.md
        echo "" >> quality_report.md
        echo "## 📋 Test Results Summary" >> quality_report.md
        echo "" >> quality_report.md
        echo "| Test Category | Status | Details |" >> quality_report.md
        echo "|---------------|--------|---------|" >> quality_report.md
        echo "| Educational Content Validation | ${{ needs.educational-content-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} | Content generation for all education levels |" >> quality_report.md
        echo "| Streamlit App Testing | ${{ needs.streamlit-app-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Both AI Tech and Universal Education apps |" >> quality_report.md
        echo "| Accessibility Testing | ${{ needs.accessibility-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Visual cues and clear structure |" >> quality_report.md
        echo "| Performance Testing | ${{ needs.performance-testing.result == 'success' && '✅ Passed' || '❌ Failed' }} | Script generation performance |" >> quality_report.md
        echo "| Educational Standards | ${{ needs.educational-standards-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }} | K-12, CSTA, ISTE compliance |" >> quality_report.md
        echo "" >> quality_report.md
        echo "## 🎯 Platform Capabilities" >> quality_report.md
        echo "" >> quality_report.md
        echo "- ✅ Middle School AI Education (Grades 6-8)" >> quality_report.md
        echo "- ✅ High School Computer Science (Grades 9-12)" >> quality_report.md
        echo "- ✅ Professional AI Tools Training" >> quality_report.md
        echo "- ✅ Multi-level content adaptation" >> quality_report.md
        echo "- ✅ Interactive educational features" >> quality_report.md
        echo "- ✅ Accessibility compliance" >> quality_report.md
        echo "" >> quality_report.md
        echo "Generated on: $(date)" >> quality_report.md
        
        cat quality_report.md
        
    - name: 📤 Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: ai-tech-education-quality-report
        path: quality_report.md
